// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    //// Replace this comment with your code.
	// 首先对输入 x 和 y 进行处理
    Mux16(a=x, b=false, sel=zx, out=x_reg); // 如果 zx 信号为 1，则将 x 清零
    Mux16(a=y, b=false, sel=zy, out=y_reg); // 如果 zy 信号为 1，则将 y 清零
    Not16(in=x_reg, out=not_x);             // 如果 nx 信号为 1，则对 x 进行逻辑非操作
    Not16(in=y_reg, out=not_y);             // 如果 ny 信号为 1，则对 y 进行逻辑非操作
    
    // 计算输出 out
    And16(a=not_x, b=not_y, out=and_out);   // 计算 x & y
    Add16(a=x_reg, b=y_reg, out=add_out);   // 计算 x + y

    Mux16(a=and_out, b=add_out, sel=f, out=out); // 根据 f 信号选择输出结果

    // 计算 zr 和 ng
    Or16Way(in=out, out=or_out);            // 计算 out 中是否有非零位
    Mux16(a=or_out, b=false, sel=no, out=ng); // 根据 no 信号选择是否对 ng 进行逻辑非操作
    Mux16(a=out, b=false, sel=no, out=zr);    // 根据 no 信号选择是否对 zr 进行逻辑非操作
}